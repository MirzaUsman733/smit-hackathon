// Ascending mixin
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num ==null or unit($num)=="%" or unit($prev-num)=="%" {
      // Do nothing
    }

    @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    @else if $prev-num >=$num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero mixin
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  @if length($map)>0 {
    $values: map-values($map);
    $first-value: nth($values, 1);

    @if $first-value !=0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// Internal Bootstrap function to turn maps into its negative variant.
// It prefixes the keys with `n` and makes the value negative.
@function negativify-map($map) {
  $result: (
  );

@each $key, $value in $map {
  @if $key !=0 {
    $result: map-merge($result, ("n" + $key: (
          -$value))
    );
}
}

@return $result;
}

// Get multiple keys from a sass map
@function map-get-multiple($map, $values) {
  $result: (
  );

@each $key, $value in $map {
  @if (index($values, $key) !=null) {
    $result: map-merge($result, ($key: $value));
  }
}

@return $result;
}

// Replace `$search` with `$replace` in `$string`
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace +str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Escape SVG function
@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      @if str-index($string, "url(")==1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      }

      @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Color contrast function
@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light, $min-contrast-ratio: $min-contrast-ratio) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);

    @if $contrast-ratio >$min-contrast-ratio {
      @return $color;
    }

    @else if $contrast-ratio >$max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, ($l1 + .05) / ($l2 + .05), ($l2 + .05) / ($l1 + .05));
}

@function luminance($color) {
  $rgb: (
    "r": red($color),
    "g": green($color),
    "b": blue($color)
  );

@each $name, $value in $rgb {
  $value: if($value / 255 < .03928, $value / 255 / 12.92, nth($_luminance-list, $value + 1));
  $rgb: map-merge($rgb, ($name: $value));
}

@return (map-get($rgb, "r") * .2126)+(map-get($rgb, "g") * .7152)+(map-get($rgb, "b") * .0722);
}

// Other color functions
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
  @if $value1 ==null {
    @return $value2;
  }

  @if $value2 ==null {
    @return $value1;
  }

  @if type-of($value1)==number and type-of($value2)==number and comparable($value1, $value2) {
    @return $value1 +$value2;
  }

  @return if($return-calc ==true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 ==null and $value2 ==null {
    @return null;
  }

  @if $value1 ==null {
    @return -$value2;
  }

  @if $value2 ==null {
    @return $value1;
  }

  @if type-of($value1)==number and type-of($value2)==number and comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @return if($return-calc ==true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}